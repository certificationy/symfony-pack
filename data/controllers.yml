category: Controllers
questions:
    -
        question: 'How to perform a redirection on example.org in a controller?'
        answers:
            - {value: return $this->redirect($this->generateUrl('http://www.example.org')), correct: false}
            - {value: return $this->redirectUrl('http://www.example.org'),                  correct: false}
            - {value: return $this->redirect('http://www.example.org'),                     correct: true}
            - {value: return $this->generateUrl('http://www.example.org'),                  correct: false}
    -
        question: 'Which method(s) can be used to retrieve a service in a controller extending AbstractController?'
        answers:
            - {value: return $this->get('service.name'),                 correct: true}
            - {value: return $this->getContainer('service.name'),        correct: false}
            - {value: return $this->getContainer()->get('service.name'), correct: false}
            - {value: return $this->container->get('service.name'),      correct: true}
    -
        question: 'Which class may be extended by your controllers?'
        answers:
            - {value: Symfony\Bundle\FrameworkBundle\Controller\AbstractController, correct: true}
            - {value: Symfony\Bundle\FrameworkBundle\Controller\Controller,         correct: false}
            - {value: Symfony\Bundle\FrameworkBundle\Controller\RedirectController, correct: true}
            - {value: Symfony\Component\FrameworkBundle\Controller\Controller,      correct: false}
            - {value: Symfony\Bundle\HttpBundle\Controller\Controller,              correct: false}
            - {value: Symfony\Bundle\HttpBundle\Controller\AbstractController,      correct: false}
    -
        question: 'Which of these annotations can be used in a controller?'
        answers:
            - {value: '@Cache',          correct: true}
            - {value: '@ParamConverter', correct: true}
            - {value: '@Security',       correct: true}
            - {value: '@Post',           correct: false}
    -
        question: 'Which of these response objects does not exists?'
        answers:
            - {value: XmlResponse,        correct: true}
            - {value: JsonResponse,       correct: false}
            - {value: BinaryFileResponse, correct: false}
            - {value: RedirectResponse,   correct: false}
    -
        question: 'Which class will you use to convert an action parameter?'
        answers:
            - {value: ParamConverter,     correct: true}
            - {value: ParameterConverter, correct: false}
            - {value: Converter,          correct: false}
            - {value: ObjectConverter,    correct: false}
    -
        question: 'Which controller/action allows to render a template without a specific controller?'
        answers:
            - {value: FrameworkBundle:Controller:template, correct: false}
            - {value: FrameworkBundle:Template:action,     correct: false}
            - {value: FrameworkBundle:Template:render,     correct: false}
            - {value: FrameworkBundle:Template:template,   correct: true}
    -
        question: 'Which of these variables are available in Controllers?'
        answers:
            - {value: $_controller,  correct: true}
            - {value: $_route,       correct: true}
            - {value: $request,      correct: true}
            - {value: $_locale,      correct: true}
            - {value: $_format,      correct: true}
    -
        question: |
            According to this action :

            /**
             * @Route("/comment/{postSlug}/new", name = "comment_new")
             *
             */
            public function newAction(Request $request, Post $post)
            {
                // ...
            }


            How my ParamConverter should be configured to match "postSlug" params with "slug" in Post ?
        answers:
            - {value: '@ParamConverter("post", options={"mapping": {"postSlug": "slug"}})', correct: true}
            - {value: '@ParamConverter("post", options={"mapping": {"slug": "postSlug"}})', correct: false}
            - {value: '@ParamConverter("post", options={"mapping": {"field": "slug"}})', correct: false}
            - {value: '@ParamConverter("post", options={"mapping": {"Post": "slug"}})', correct: false}
            - {value: 'It is not possible, params and fields must match', correct: false}
