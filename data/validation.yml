category: Validation
questions:
    -
        question: 'In order to use validation group, which interface will you implement on your object?'
        answers:
            - {value: Symfony\Component\Validator\GroupValidationInterface,         correct: false}
            - {value: Symfony\Component\Validator\GroupValidationProviderInterface, correct: false}
            - {value: Symfony\Component\Validator\GroupProviderInterface,           correct: false}
            - {value: Symfony\Component\Validator\GroupSequenceProviderInterface,   correct: true}
    -
        question: 'Using Validator component, which method is used to validate a value against a constraint?'
        answers:
            - {value: "$validator->validate($object, $constraint)",      correct: true}
            - {value: "$validator->validateValue($object, $constraint)", correct: false}
            - {value: "$validator->isValid($object, $constraint)",       correct: false}
            - {value: "$validator->validation($object, $constraint)",    correct: false}
    -
        question: 'True or False ? All entities have at least 2 validation groups.'
        answers:
            - {value: "True",    correct: true}
            - {value: "False",   correct: false}
    -
        question: 'True or False ? We can also apply constraints on class getters with ``addPropertyConstraint()``'
        answers:
            - {value: "True",    correct: false}
            - {value: "False",   correct: true}
    -
        question: 'True or False ? In Symfony:'
        answers:
            - {value: "Annotations mapping are enabled by default",                correct: false}
            - {value: "UniqueEntity is provided by Doctrine Bundle",               correct: false}
            - {value: "We can validate partial object with @Assert\\GroupSequence", correct: true}
            - {value: "All assertions above are valid",                            correct: false}
    -
        question: 'Which constraints exist?'
        answers:
            - {value: "Blank", correct: true}
            - {value: "IdenticalTo", correct: true}
            - {value: "EqualTo", correct: true}
            - {value: "SameAs", correct: false}
    -
        question: 'Which annotation are valid ?'
        answers:
            - {value: '@Assert\Choice({"male", "female", "other"})', correct: true}
            - {value: '@Assert\Choice(choices = {"male", "female", "other"})', correct: true}
            - {value: '@Assert\Choices({"male", "female", "other"})', correct: false}
            - {value: '@Assert\Choices(choices = {"male", "female", "other"})', correct: false}
    -
        question: 'How to tell the validator to use a specific group ?'
        answers:
            - {value: 'pass one or more group names as the third argument of $validator->validate()', correct: true}
            - {value: 'pass one or more group names as the second argument of $validator->validate()', correct: false}
            - {value: 'use $validator->setValidationGroups(array)', correct: false}
    -
        question: 'What will be returned by the ValidatorInterface validate method ?'
        answers:
            - {value: 'ConstraintViolationList', correct: true}
            - {value: 'ConstraintErrorList', correct: true}
            - {value: 'ConstraintViolationInterface[]', correct: false}
            - {value: 'ConstraintErrorInterface[]', correct: false}
    -
        question: 'Which method of the ConstraintViolationList is not defined by ConstraintViolationListInterface'
        answers:
            - {value: 'findByCodes', correct: true}
            - {value: 'offsetUnset', correct: false}
            - {value: 'offsetSet', correct: false}
            - {value: 'offsetGet', correct: false}
            - {value: 'offsetExists', correct: false}
    -
        question: 'How to enable annotation for validation'
        answers:
            - {value: 'framework: validation: { enable_annotations: true } in framework.yaml', correct: true}
            - {value: 'framework: validation: { annotations: true } in framework.yaml', correct: false}
            - {value: 'framework: validation: { enabled: true } in framework.yaml', correct: false}
            - {value: 'It is enabled by default', correct: false}
    -
        question: 'Which of the following constraints exists ?'
        answers:
            - {value: 'Type', correct: true}
            - {value: 'Ip', correct: true}
            - {value: 'Uuid', correct: true}
            - {value: 'NotCompromisedPassword', correct: true}
            - {value: 'DivisibleBy', correct: true}
            - {value: 'Traverse', correct: true}
            - {value: 'Collection', correct: true}
    -
        question: 'On Which type of object can we apply constraint'
        answers:
            - {value: 'property', correct: true}
            - {value: 'class', correct: true}
            - {value: 'getters', correct: true}
            - {value: 'setters', correct: false}
    -
        question: 'What is the default validation group ?'
        answers:
            - {value: 'All the constraints in the current class and all the referenced class that does not belong to any other group', correct: true}
            - {value: 'All the constraints in the current class class that does not belong to any other group', correct: false}
            - {value: 'Constraints belonging to the default group', correct: true}
            - {value: 'Constraints belonging to the ClassName group', correct: true}
    -
        question: 'If you validate the User class extends BaseUser class with the User group :'
        answers:
            - {value: 'The fields declared only in BaseUser will be validated', correct: true}
            - {value: 'The fields in the User class will be validated', correct: true}
            - {value: 'Constraints of objects embedded in the user class will be validated', correct: false}
    -
        question: 'How to sequentially apply validation groups ?'
        answers:
            - {value: '* @Assert\GroupSequence({\"User\", \"Strict\"}) on the class', correct: true}
            - {value: 'implement GroupSequenceInterface and the getGroupSequence method', correct: false}
    -
        question: 'When using group sequence, if there is no embedded object the default group and the ClassName group are the same'
        answers:
            - {value: 'Yes', correct: false}
            - {value: 'No', correct: true}
        help: |
            https://symfony.com/doc/current/validation/sequence_provider.html
    -
        question: 'You can use GroupSequenceProvider to dynamically chose which group to validate against'
        answers:
            - {value: 'Yes by implementing the GroupSequenceProviderInterface', correct: true}
            - {value: 'No', correct: false}
            - {value: 'Yes by adding the fourth argument of the validator function', correct: false}
        help: |
            https://symfony.com/doc/current/validation/sequence_provider.html
    -
        question: 'When creating a Toto constraint, must the Validator class be called TotoValidator'
        answers:
            - {value: 'Yes always', correct: false}
            - {value: 'No if you implement the correct method', correct: true}
    -
        question: 'What is the signature of the validate method ?'
        answers:
            - {value: 'validate($value, Constraint $constraint): void', correct: true}
            - {value: 'validate($value, Constraint $constraint): ConstraintViolation|null', correct: false}
            - {value: 'validate($value, Constraint $constraint): ConstraintViolation', correct: false}
            - {value: 'validate($value, Constraint $constraint, $context): ConstraintViolation', correct: false}
            - {value: 'validate($value, Constraint $constraint, $context): void', correct: false}
    -
        question: 'How to create a class validator ?'
        answers:
            - {value: 'return self::ClassConstraint in the getTargets method of the validator class', correct: false}
            - {value: 'return self::ClassConstraint in the getTargets method of the constraint class', correct: true}
